{"ast":null,"code":"var _jsxFileName = \"/Users/venith/Desktop/FF_Assignment/policymanagement/src/components/ProfileUpdate/ProfileUpdate.js\";\nimport React, { Component } from 'react';\nimport HomeLayout from '../../UI_Components/HomeLayout/HomeLayout';\nimport UpdateForm from './UpdateForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ProfileUpdate extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      userForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: this.props.user.name,\n          validation: {\n            required: true,\n            validName: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: this.props.user.name,\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        },\n        address: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Address'\n          },\n          value: this.props.user.address,\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: this.props.user.street,\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'ZIP Code'\n          },\n          value: this.props.user.zipCode,\n          validation: {\n            required: true,\n            minLength: 6,\n            maxLength: 6,\n            isNumeric: true\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'country'\n          },\n          value: this.props.user.country,\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your E-Mail'\n          },\n          value: this.props.user.email,\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        gender: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: '',\n              displayValue: 'Please select gender'\n            }, {\n              value: 'male',\n              displayValue: 'male'\n            }, {\n              value: 'female',\n              displayValue: 'female'\n            }]\n          },\n          value: this.props.user.gender,\n          validation: {\n            required: true\n          },\n          valid: true\n        },\n        maritalstatus: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: '',\n              displayValue: 'Please select  marital status'\n            }, {\n              value: 'married',\n              displayValue: 'married'\n            }, {\n              value: 'divorced',\n              displayValue: 'divorced'\n            }, {\n              value: 'single',\n              displayValue: 'single'\n            }]\n          },\n          value: this.props.user.maritalstatus,\n          validation: {\n            required: true\n          },\n          valid: true\n        },\n        phonenumber: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'phonenumber'\n          },\n          value: this.props.user.phonenumber,\n          validation: {\n            required: true,\n            minLength: 10,\n            maxLength: 10\n          },\n          valid: false,\n          touched: false\n        },\n        dateofbirth: {\n          elementType: 'input',\n          elementConfig: {\n            label: 'DOB',\n            type: 'date',\n            placeholder: ''\n          },\n          value: this.props.user.dateofbirth,\n          validation: {\n            required: true,\n            ageCheck: true\n          },\n          valid: false,\n          touched: false\n        },\n        idtype: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: '',\n              displayValue: 'Please select  ID  Type'\n            }, {\n              value: 'passport',\n              displayValue: 'passport'\n            }, {\n              value: 'driving',\n              displayValue: 'driving license'\n            }, {\n              value: 'ID card',\n              displayValue: 'ID card'\n            }]\n          },\n          value: this.props.user.idtype,\n          validation: {\n            required: true\n          },\n          valid: true\n        },\n        idnumber: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'ID Number'\n          },\n          value: this.props.user.idnumber,\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      formIsValid: false,\n      loading: false\n    };\n\n    this.userHandler = event => {\n      event.preventDefault();\n      this.setState({\n        loading: true\n      });\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.userForm) {\n        console.log(formElementIdentifier);\n        formData[formElementIdentifier] = this.state.userForm[formElementIdentifier].value;\n      }\n\n      formData[\"username\"] = this.props.user.username;\n      formData[\"registrationDate\"] = this.props.user.registrationDate;\n      axios.put('http://localhost:3000/users', formData).then(response => {\n        this.setState({\n          loading: false\n        });\n        this.props.onUpdateAction(formData);\n        this.props.history.push('/');\n      }).catch(error => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      const updatedUserForm = { ...this.state.userForm\n      };\n      const updatedFormElement = { ...updatedUserForm[inputIdentifier]\n      };\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n      updatedFormElement.touched = true;\n      updatedUserForm[inputIdentifier] = updatedFormElement;\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedUserForm) {\n        formIsValid = updatedUserForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        userForm: updatedUserForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  checkValidity(value, rules) {\n    let isValid = true;\n\n    if (!rules) {\n      return true;\n    }\n\n    if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n    }\n\n    if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.validName) {\n      const pattern = /^[a-zA-Z ]*$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid;\n    }\n\n    if (rules.ageCheck) {\n      console.log(\".............\" + value);\n    }\n\n    return isValid;\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.userForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.userForm[key]\n      });\n    }\n\n    let form = /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.userHandler,\n      children: [formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n        elementType: formElement.config.elementType,\n        elementConfig: formElement.config.elementConfig,\n        value: formElement.config.value,\n        invalid: !formElement.config.valid,\n        shouldValidate: formElement.config.validation,\n        touched: formElement.config.touched,\n        changed: event => this.inputChangedHandler(event, formElement.id)\n      }, formElement.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 15\n      }, this)), /*#__PURE__*/_jsxDEV(Button, {\n        btnType: \"Success\",\n        children: \"UPDATE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this);\n\n    if (this.state.loading) {\n      form = /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.ProfileUpdate,\n      children: [/*#__PURE__*/_jsxDEV(HomeLayout, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"UPDATE PROFILE DATA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 11\n      }, this), form]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.formData\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onUpdateAction: formData => dispatch({\n      type: actionTypes.PROFILE_UPDATE_ACTION,\n      formData: formData\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileUpdate);","map":{"version":3,"sources":["/Users/venith/Desktop/FF_Assignment/policymanagement/src/components/ProfileUpdate/ProfileUpdate.js"],"names":["React","Component","HomeLayout","UpdateForm","ProfileUpdate","state","userForm","name","elementType","elementConfig","type","placeholder","value","props","user","validation","required","validName","valid","touched","password","minLength","address","street","zipCode","maxLength","isNumeric","country","email","isEmail","gender","options","displayValue","maritalstatus","phonenumber","dateofbirth","label","ageCheck","idtype","idnumber","formIsValid","loading","userHandler","event","preventDefault","setState","formData","formElementIdentifier","console","log","username","registrationDate","axios","put","then","response","onUpdateAction","history","push","catch","error","inputChangedHandler","inputIdentifier","updatedUserForm","updatedFormElement","target","checkValidity","rules","isValid","trim","length","pattern","test","render","formElementsArray","key","id","config","form","map","formElement","classes","mapStateToProps","mapDispatchToProps","dispatch","actionTypes","PROFILE_UPDATE_ACTION","connect"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport HomeLayout from '../../UI_Components/HomeLayout/HomeLayout';\nimport UpdateForm from './UpdateForm';\n\n\n\nclass ProfileUpdate extends Component {\n\n  state = {\n    userForm: {\n        name: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'Your Name'\n            },\n            value: this.props.user.name,\n            validation: {\n                required: true,\n                validName:true\n            },\n            valid: false,\n            touched: false\n        },\n        password: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'password',\n                placeholder: 'Password'\n            },\n            value: this.props.user.name,\n            validation: {\n                required: true,\n                minLength: 6\n                \n            },\n            valid: false,\n            touched: false\n        },\n        address: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'Address'\n            },\n            value: this.props.user.address,\n            validation: {\n                required: true\n            },\n            valid: false,\n            touched: false\n        },\n        street: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'Street'\n            },\n            value: this.props.user.street,\n            validation: {\n                required: true\n            },\n            valid: false,\n            touched: false\n        },\n        zipCode: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'ZIP Code'\n            },\n            value:this.props.user.zipCode,\n            validation: {\n                required: true,\n                minLength: 6,\n                maxLength: 6,\n                isNumeric: true\n            },\n            valid: false,\n            touched: false\n        },\n        country: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'country'\n            },\n            value:this.props.user.country,\n            validation: {\n                required: true\n            },\n            valid: false,\n            touched: false\n        },\n        email: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'email',\n                placeholder: 'Your E-Mail'\n            },\n            value:this.props.user.email,\n            validation: {\n                required: true,\n                isEmail: true\n            },\n            valid: false,\n            touched: false\n        },\n        gender: {\n            elementType: 'select',\n            elementConfig: {\n                options: [\n                    {value: '', displayValue: 'Please select gender'},\n                    {value: 'male', displayValue: 'male'},\n                    {value: 'female', displayValue: 'female'}\n                ]\n            },\n            value: this.props.user.gender,\n            validation: {required: true},\n            valid: true\n        },\n        maritalstatus: {\n            elementType: 'select',\n            elementConfig: {\n                options: [\n                    {value: '', displayValue: 'Please select  marital status'},\n                    {value: 'married', displayValue: 'married'},\n                    {value: 'divorced', displayValue: 'divorced'},\n                    {value: 'single', displayValue: 'single'}\n                ]\n            },\n            value: this.props.user.maritalstatus,\n            validation: {required: true},\n            valid: true\n        },\n        phonenumber: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'phonenumber'\n            },\n            value: this.props.user.phonenumber,\n            validation: {\n                required: true,\n                minLength: 10,\n                maxLength: 10,\n            },\n            valid: false,\n            touched: false\n        },\n        dateofbirth: {\n            elementType: 'input',\n            elementConfig: {\n                label : 'DOB',\n                type: 'date',\n                placeholder: ''\n            },\n            value:this.props.user.dateofbirth,\n            validation: {\n                required :true,\n                ageCheck:true\n            },\n            valid: false,\n            touched: false\n        },\n        idtype: {\n            elementType: 'select',\n            elementConfig: {\n                options: [\n                    {value: '', displayValue: 'Please select  ID  Type'},\n                    {value: 'passport', displayValue: 'passport'},\n                    {value: 'driving', displayValue: 'driving license'},\n                    {value: 'ID card', displayValue: 'ID card'}\n                ]\n            },\n            value: this.props.user.idtype,\n            validation: {required: true},\n            valid: true\n        },\n        idnumber: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'ID Number'\n            },\n            value: this.props.user.idnumber,\n            validation: {\n                required: true\n            },\n            valid: false,\n            touched: false\n        },\n    },\n    formIsValid: false,\n    loading: false\n}\n\n\nuserHandler = ( event ) => {\n  event.preventDefault();\n  this.setState( { loading: true } );\n  const formData = {};\n  for (let formElementIdentifier in this.state.userForm) {\n      console.log(formElementIdentifier);\n      formData[formElementIdentifier] = this.state.userForm[formElementIdentifier].value;\n  }\n  formData[\"username\"]=this.props.user.username;\n  formData[\"registrationDate\"]=this.props.user.registrationDate;\n  \n   \n  axios.put( 'http://localhost:3000/users', formData )\n    .then( response => {\n        this.setState( { loading: false } );\n        this.props.onUpdateAction(formData);\n       this.props.history.push( '/' );\n     } )\n   .catch( error => {\n         this.setState( { loading: false } );\n    } );\n}\n\ncheckValidity(value, rules) {\n  let isValid = true;\n  if (!rules) {\n      return true;\n  }\n  \n  if (rules.required) {\n      isValid = value.trim() !== '' && isValid;\n  }\n\n  if (rules.minLength) {\n      isValid = value.length >= rules.minLength && isValid\n  }\n\n  if (rules.maxLength) {\n      isValid = value.length <= rules.maxLength && isValid\n  }\n\n  if (rules.isEmail) {\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test(value) && isValid\n  }\n  if(rules.validName){\n      const pattern = /^[a-zA-Z ]*$/;\n      isValid = pattern.test(value) && isValid\n  }\n\n  if (rules.isNumeric) {\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value) && isValid\n  }\n  if(rules.ageCheck){\n      console.log(\".............\"+value);\n\n  }\n  return isValid;\n}\n\n\n\ninputChangedHandler = (event, inputIdentifier) => {\n  const updatedUserForm = {\n      ...this.state.userForm\n  };\n  const updatedFormElement = { \n      ...updatedUserForm[inputIdentifier]\n  };\n  updatedFormElement.value = event.target.value;\n  updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n  updatedFormElement.touched = true;\n  updatedUserForm[inputIdentifier] = updatedFormElement;\n  \n  let formIsValid = true;\n  for (let inputIdentifier in updatedUserForm) {\n      formIsValid = updatedUserForm[inputIdentifier].valid && formIsValid;\n  }\n  this.setState({userForm: updatedUserForm, formIsValid: formIsValid});\n}\n\nrender () {\n  const formElementsArray = [];\n  for (let key in this.state.userForm) {\n      formElementsArray.push({\n          id: key,\n          config: this.state.userForm[key]\n      });\n  }\n  let form = (\n      <form onSubmit={this.userHandler}>\n          {formElementsArray.map(formElement => (\n              <Input \n                  key={formElement.id}\n                  elementType={formElement.config.elementType}\n                  elementConfig={formElement.config.elementConfig}\n                  value={formElement.config.value}\n                  invalid={!formElement.config.valid}\n                  shouldValidate={formElement.config.validation}\n                  touched={formElement.config.touched}\n                  changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n          ))}\n          <Button btnType=\"Success\" >UPDATE</Button>\n      </form>\n  );\n  if ( this.state.loading ) {\n      form = <Spinner />;\n  }\n  return (\n      <div className={classes.ProfileUpdate}>\n        <HomeLayout/>\n          <h4>UPDATE PROFILE DATA</h4>\n          {form}\n      </div>\n  );\n}\n}\n\n\nconst mapStateToProps = state => {\n  return {\n      user: state.formData\n  };\n};\n\nconst mapDispatchToProps = dispatch =>{\n\n  return{\n      onUpdateAction : (formData) => dispatch({type:actionTypes.PROFILE_UPDATE_ACTION,formData:formData})\n  }\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileUpdate);"]},"metadata":{},"sourceType":"module"}